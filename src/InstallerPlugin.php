<?php

namespace Globalis\WP\Composer\WPCli;

use Composer\Composer;
use Composer\EventDispatcher\EventSubscriberInterface;
use Composer\IO\IOInterface;
use Composer\Plugin\PluginEvents;
use Composer\Plugin\PluginInterface;
use Composer\Util\Filesystem;

class InstallerPlugin implements PluginInterface, EventSubscriberInterface
{
    const PACKAGE_TYPE = 'wp-cli-package';

    protected $composer;

    protected $io;

    protected $fileSystem;

    protected $basePath;

    protected $vendorPath;


    public function activate(Composer $composer, IOInterface $io)
    {
        $this->composer = $composer;
        $this->io = $io;
        $this->fileSystem =  new Filesystem();
        $this->basePath = $this->fileSystem->normalizePath(realpath(realpath(getcwd())));
        $this->vendorPath = $this->fileSystem->normalizePath(realpath(realpath($this->composer->getConfig()->get('vendor-dir'))));
    }

    public static function getSubscribedEvents()
    {
        return array(
            'pre-autoload-dump' => array(
                'preAutoloadDumpEvent'
            ),
        );
    }

    public function preAutoloadDumpEvent($event)
    {
        $repo = $this->composer->getRepositoryManager()->getLocalRepository();

        $bootstrapFiles = [];
        foreach ($repo->getPackages() as $package) {
            if ($package->getType() === static::PACKAGE_TYPE) {
                $extra = $package->getExtra();
                $autoload = $package->getAutoload();
                $path = $this->getPathCode($package);

                if ($autoload && isset($autoload['files'])) {
                    // Add to wp cli auto and remove autoload
                    foreach($autoload['files'] as $file) {
                        $bootstrapFiles[] = $path.'/'. $file;
                    }
                    unset($autoload['files']);
                    $package->setAutoload($autoload);
                }

                // If extra key
                if ($extra && isset($extra['register_command_file'])) {
                    $bootstrapFiles[] = $path.'/' . $extra['register_command_file'];
                } else {
                    $bootstrapFiles[] = $path.'/register_command_file.php';
                }
            }
        }

        $this->writeAutoload($bootstrapFiles);
    }

    protected function writeAutoload($files)
    {
        $filesCode = '';
        foreach (array_unique($bootstrapFiles) as $path) {
            $filesCode.= "\n$path,";
        }
        $content = <<<EOF
<?php
// autoload_files.php @generated by WpCli installer
\$vendorDir = dirname(dirname(__FILE__));
\$baseDir = dirname(\$vendorDir);

return array($filesCode
);
EOF;
        // Add file in WPCli loader
        file_put_contents(
            $this->composer->getConfig()->get('vendor-dir') . '/autoload_wp-cli.php',
            $content
        );
    }

    protected function getPathCode($package)
    {
        $path =$this->composer->getInstallationManager()->getInstallPath($package);
        $filesystem = $this->getFilesystem();
        if (!$filesystem->isAbsolutePath($path)) {
            $path = $this->basePath . '/' . $path;
        }
        $path = $filesystem->normalizePath($path);
        $baseDir = '';
        if (strpos($path.'/', $this->vendorPath.'/') === 0) {
            $path = substr($path, strlen($this->vendorPath));
            $baseDir = '$vendorDir';
            if ($path !== false) {
                $baseDir .= " . ";
            }
        } else {
            $path = $filesystem->normalizePath($filesystem->findShortestPath($this->basePath, $path, true));
            if (!$filesystem->isAbsolutePath($path)) {
                $baseDir = '$baseDir . ';
                $path = '/' . $path;
            }
        }
        if (preg_match('/\.phar$/', $path)) {
            $baseDir = "'phar://' . " . $baseDir;
        }
        return $baseDir . (($path !== false) ? var_export($path, true) : "");
    }

    protected function getFilesystem()
    {
        return $this->fileSystem;
    }
}
